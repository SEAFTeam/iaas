entities:
  seaf.ta.reverse.vmwarecloud.vdcgroups:
    presentations:
      list:
        type: table
        headers:
          - value: title
            text: Наименование VDC Group
            sortable: true
            align: left
            link: link
            width: 300
          - value: vdc_titles
            text: VDC's
            align: left
          - value: network_titles
            text: Сети
            align: left
          - value: org_title
            text: Организация
            align: left
            link: org_link
        source: >
          (
              $domain := $params.domain;
              $reverse_vmwarecloud_vdcgroups($, $domain) ~> | $ | {'vdc_titles': $join(vdc_titles, '\n'), 'network_titles': $join(network_titles, '\n')} |
          )

      card:
        type: markdown
        template: templates/vdcgroup_card.md
        source: >
          (
              $id := $params.id;
              $vdc := $reverse_vmwarecloud_vdcgroups($)[id = $id];
              $vdc ~> | $ | {'vdc_titles': $join(vdc_titles, '\n'), 'network_titles': $join(network_titles, '\n'), 'vdcs': $exists(vdcs), 'networks': $exists(networks)} |
          )

      schema:
        type: smartants
        source: >
          (
              $id := $params.id;
              $fn_svg_block := $$.icons."reverse.general".svg_block;
              $fn_svg_nsx_gateway := $$.icons."reverse.general".svg_nsx_gateway;
              $fn_svg_internet := $$.icons."reverse.general".svg_internet;
              $egws := $reverse_vmwarecloud_egws($)[vdcgroup = $id];
              $vdcgroup := $reverse_vmwarecloud_vdcgroups($)[id = $id];
              $vdcs := $reverse_vmwarecloud_vdcs($)[id in $vdcgroup.vdcs];
              $egws := $reverse_vmwarecloud_egws($)[vdcgroup = $id or vdc in $vdcs.id];
              $vapps := $reverse_vmwarecloud_vapps($)[vdc in $vdcs.id];
              $vms := $reverse_vmwarecloud_vms($)[vapp in $vapps.id];
              $vdcgorgnets := $reverse_vmwarecloud_orgnets($)[vdcgroup = $vdcgroup.id];
              $vdcorgnets := $reverse_vmwarecloud_orgnets($)[vdc in $vdcs.id];
              $vappnets := $reverse_vmwarecloud_vappnets($)[vapp in $vapps.id];
              $org := $reverse_vmwarecloud_orgs($)[id = $vdcgroup.org];
              $nodes := {$vdcgroup.org.$split('.')[-1]:{'title': 'Организация: ' & $org.title}};
              $nodes := $append($nodes, {$vdcgroup.org.$split('.')[-1] & '.' & $vdcgroup.short_id: {'title': 'VDC Group: ' & $vdcgroup.title}});
              $baseprefix := $vdcgroup.org.$split('.')[-1] & '.' & $vdcgroup.short_id;
              $nodes := $append($nodes, $vdcs.(
                      {
                          $baseprefix & '.' & $.short_id: {
                              'title': 'VDC: ' & $.title
                          }
                      }
                  )
              );
              $nodes := $append($nodes, $vapps.(
                      $vdc_shortid := $.vdc.$split('.')[-1];
                      $prefix := $baseprefix & '.' & $vdc_shortid;
                      {
                          $prefix & '.' & $.short_id: {
                              'title': $.title,
                              'symbol': 'vapp-' & $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes, $vdcorgnets.(
                      $vdc_shortid := $.vdc.$split('.')[-1];
                      $prefix := $baseprefix & '.' & $vdc_shortid;
                      {
                          $prefix & '.' & $.short_id: {
                              'title': $.title,
                              'symbol': 'orgnet-' & $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes, $vdcgorgnets.(
                      $id := $.id;
                      $tmp := $;
                      $net_in_vdcs := $vdcs[$id in availablenetworks]; /* В этих видиси доступна данная сеточка */
                      $net_in_vdcs.(
                          $prefix := $baseprefix & '.' & $.short_id;
                          {
                              $prefix & '.' & $tmp.short_id: {
                                  'title': $tmp.title,
                                  'symbol': 'orgnet-' & $tmp.short_id,
                                  'hideTitle': true
                              }
                          }
                      )
                  )
              );
              $nodes := $append($nodes, $egws.(
                      {
                          $baseprefix & '.' & $.short_id: {
                              'title': $.title,
                              'symbol': 'egw-' & $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $externalNetworks := $egws.($.gatewayinterfaces[iftype = 'uplink']);
              $externalNetworksDistinctIds := $distinct($externalNetworks.network);
              $externalNetworks := $externalNetworksDistinctIds.(
                  $id := $;
                  $unique := $count($externalNetworks[network = $id]) = 1 ? $externalNetworks[network = $id];
                  $notunique :=  $count($externalNetworks[network = $id]) > 1 ? (
                      $nets := $externalNetworks[network = $id];
                      {
                          'title': $nets[0].title,
                          'network': $nets[0].network,
                          'iftype': $nets[0].iftype,
                          'usefordefaultroute': $nets[0].usefordefaultroute,
                          'connected': $nets[0].connected,
                          'subnetparticipation': $nets.subnetparticipation
                      }
                  );
                  $append($unique, $notunique) 
              );
              $nodes := $append($nodes, $externalNetworks.(
                          {
                              ($.network != null ? ($.network.$split('.')[-1]) : $.network): {
                                  'title': $.title,
                                  'symbol': 'extnet-' & ($.network != null ? ($.network.$split('.')[-1]) : $.network),
                                  'hideTitle': true
                              }
                          }          
                  )
              );
              $nodes := $append($nodes, 
                  $exists($externalNetworks) ? 
                      {
                          'internet': {'title': 'Internet', 'symbol': 'internet', 'hideTitle': true}
                      }
              );
              $links := [$egws.(
                  $regexp := $eval('/.*\\.' & $.short_id & '/');
                  $gwnode := $nodes[$regexp($.$keys())].$keys()[0];
                  $.gatewayinterfaces.(
                    $ipaddress := $.subnetparticipation.ipaddress;
                    $regexp := $eval('/.*\\.' & ($.network != null ? ($.network.$split('.')[-1]) : $.network) & '/');
                    $nodes[$regexp($.$keys())].(
                        {
                            'from': $gwnode,
                            'to': $keys()[0],
                            'style': '<->',
                            'title': $ipaddress
                        }
                    )
                  )
              )];
              /* Внешняя сеть */
              $links := $append($links, 
                  [$egws.(
                      $regexp := $eval('/.*\\.' & $.short_id & '/');
                      $gwnode := $nodes[$regexp($.$keys())].$keys()[0];
                      $.gatewayinterfaces.(
                          $ipaddress := $.subnetparticipation.ipaddress;
                          $regexp := $eval('/^' & ($.network != null ? ($.network.$split('.')[-1]) : $.network) & '$/');
                          $nodes[$regexp($.$keys())].(
                              {
                                  'from': $gwnode,
                                  'to': $keys()[0],
                                  'style': '-[#AED900]->',
                                  'title': $ipaddress
                              }
                          )
                      )
                )]
              );
              $links := $append($links,
                  [$vapps.(
                      $vapp_id := $.id;
                      $vapp := $;
                      $regexp := $eval('/.*\\.' & $.short_id & '/');
                      $vappnode := $nodes[$regexp($.$keys())].$keys()[0];
                      $vappnets[vapp = $vapp_id].(
                          $vdc := $vdcs[id = $vapp.vdc];
                          $regexp := $vdc.id in $vdcgroup.vdcs ? (
                              $eval('/.*\\.' & $vapp.vdc.$split('.')[-1] & '\\.' & ($.parentnetwork != null ? ($.parentnetwork.$split('.')[-1]) : $.parentnetwork) & '/');
                          ) : (
                              $eval('/.*\\.' & ($.parentnetwork != null ? ($.parentnetwork.$split('.')[-1]) : $.parentnetwork) & '/');
                          );
                          $nodes[$regexp($.$keys())].(
                              {
                                  'from': $vappnode,
                                  'to': $keys()[0],
                                  'style': '->',
                                  'title': 'Parent network'
                              }
                          )
                      )
                  )]
              );
              $links := $append($links,
                  [$vdcgorgnets.(
                      $orgnet_id := $.id;
                      $orgnet := $;
                      $regexp := $eval('/.*\\.' & $.short_id & '/');
                      $orgnetnodes := $nodes[$regexp($.$keys())].$keys()[0];
                      $map($orgnetnodes, function($v, $i, $a){
                          $i+1 < $count($a) ? (
                            {
                                'from': $v,
                                'to': $a[$i+1],
                                'style': '-[#000000]-',
                                'title': 'Orgnet shared with VDCs'
                            }
                          )
                      })
                  )]
              );
              $links := $append($links,
                  $exists($externalNetworks) ? 
                     $externalNetworks.(
                          {
                              'from': ($.network != null ? ($.network.$split('.')[-1]) : $.network),
                              'to': 'internet',
                              'title': 'Внешняя сеть в интернет',
                              'style': '->'
                          }
                      )
              );
              $symbols := $append($symbols, $vapps.(
                      $vapp := $.id;
                      $vapp_nets := $eval($fn_vappnets)[vapp = $vapp];
                      $netranges := $join($vapp_nets.($.ipscopes.($.ipranges.($.startaddress & '-' & $.endaddress))), ' ');
                      $fencemode := $join($vapp_nets.($.fencemode), ' ');
                      $vmscount := $count($vms[vapp = $vapp]);
                      $data := {'Vm`s in vapp': $string($vmscount), 'Networks': $netranges, 'Fence mode': $fencemode};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'description': $.description, 'href': $.link, 'type':'vApp', 'details': $data});
                      {
                          'vapp-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $vdcorgnets.(
                      $netranges := $join($.ipscopes.($.ipranges.($.startaddress & '-' & $.endaddress)), ' ');
                      $dnssrv := $join($.dns, ', ');
                      $fencemode := $.fencemode;
                      $data := {'Networks': $netranges, 'DNS Servers': $dnssrv, 'Fence Mode': $fencemode};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'description': $.description, 'href': $.link, 'type':'orgNet', 'details': $data});
                      {
                          'orgnet-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $vdcgorgnets.(
                      $netranges := $join($.ipscopes.($.ipranges.($.startaddress & '-' & $.endaddress)), ' ');
                      $dnssrv := $join($.dns, ', ');
                      $fencemode := $.fencemode;
                      $data := {'Networks': $netranges, 'DNS Servers': $dnssrv, 'Fence Mode': $fencemode};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'description': $.description, 'href': $.link, 'type':'vdcgorgNet', 'details': $data});
                      {
                          'orgnet-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $egws.(
                      $icon := $eval($fn_svg_nsx_gateway, {'title': $.title, 'href': $.link});
                      {
                          'egw-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $externalNetworks.(
                      $netranges := $join($.subnetparticipation.($.ipranges.($.startaddress & '-' & $.endaddress)), ' ');
                      $gateway := $join($.subnetparticipation.($.gateway), ' ');
                      $netmask := $join($.subnetparticipation.($.netmask), ' ');
                      $data := {'Networks': $netranges, 'Gateway': $gateway, 'Netmask': $netmask};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'type':'extNet', 'details': $data});
                      {
                          'extnet-' & ($.network != null ? ($.network.$split('.')[-1]) : $.network): $icon
                      }
                  )
              );
              $symbols := $append($symbols, 
                  ($exists($externalNetworks) ? 
                      ( $icon := $eval($fn_svg_internet);
                        {
                            'internet': $icon
                        }
                      )
                  )
              );
              {
                  'nodes': $merge($nodes),
                  'symbols': $merge($symbols),
                  'links': $links,
                  'config': {                 
                      'distance': 120,
                      'trackWidth': 24
                  }
              };
          )

      vdcs:
        type: table
        headers:
          - value: title
            text: Наименование VDC
            sortable: true
            align: left
            link: link
          - value: description
            text: Описание
            align: left
        source: >
          (
              $id := $params.id;
              $vdcgroup := $reverse_vmwarecloud_vdcgroups($)[id = $id];
              [$reverse_vmwarecloud_vdcs($)[id in $vdcgroup.vdcs]]
          )

      networks:
        type: table
        headers:
          - value: title
            text: Наименование сети
            sortable: true
            align: left
            link: link
          - value: description
            text: Описание
            align: left
        source: >
          (
              $id := $params.id;
              $vdcgroup := $reverse_vmwarecloud_vdcgroups($)[id = $id];
              [$reverse_vmwarecloud_orgnets($)[id in $vdcgroup.networks]]
          )