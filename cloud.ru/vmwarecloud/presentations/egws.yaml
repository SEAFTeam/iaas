entities:
  seaf.ta.reverse.vmwarecloud.egws:
    presentations:
      card:
        type: markdown
        template: templates/egw_card.md
        source: >
          (   
              $id := $params.id;
              $egw := $reverse_vmwarecloud_egws($)[id = $id];
              $egws_nat := $reverse_vmwarecloud_egws_nat($)[gw = $id];
              $nataddresses := $distinct($egws_nat.external_address);
              $orgnets := $reverse_vmwarecloud_orgnets($)[id in $egw.gatewayinterfaces.network];
              $addresses := $egw.gatewayinterfaces.subnetparticipation.ipaddress.($ != null ? $);
              $egw ~> | $ | {'orgnets': $orgnets, 'addresses': $addresses, 'nataddresses': $nataddresses } |
          )

      schema:
        type: smartants
        source: >
          (
              $id := $params.id;
              $fn_svg_nsx_gateway := $$.icons."reverse.general".svg_nsx_gateway;
              $fn_svg_block := $$.icons."reverse.general".svg_block;
              $fn_svg_internet := $$.icons."reverse.general".svg_internet;
              $egw := $reverse_vmwarecloud_egws($)[id = $id];
              $orgnets := $reverse_vmwarecloud_orgnets($)[id in $egw.gatewayinterfaces.network];
              $nodes := {$egw.org.$split('.')[-1]:{'title': 'Организация: ' & $egw.org_title}};
              $nodes := $append($nodes, {$egw.org.$split('.')[-1] & '.' & $egw.vdc.$split('.')[-1]: {'title': 'VDC: ' & $egw.vdc_title}});
              $nodes := $append($nodes, $egw.(
                      $prefix := org.$split('.')[-1] & '.' & vdc.$split('.')[-1];
                      {
                          $prefix & '.' & $.short_id: {
                              'title': title,
                              'symbol': 'egw-' & id.$split('.')[-1],
                              'hideTitle': true
                          }
                      }
                  )
              );
              $extnets := $egw.(
                  $.gatewayinterfaces.(
                      $netid := ($.network != null ? ($.network.$split('.')[-1]) : $.network);
                      $not($netid in $orgnets.short) ? (
                          $
                      )
                  )
              );
              $intnets := $egw.(
                  $.gatewayinterfaces.(
                      $netid := ($.network != null ? ($.network.$split('.')[-1]) : $.network);
                      $netid in $orgnets.short_id ? (
                          $orgnets[short_id = $netid]
                      )
                  )
              );
              $nodes := $append($nodes, $extnets.(
                      {
                          $.network.$split('.')[-1]: {
                              'title': $.title,
                              'symbol': 'extnet-' & ($.network != null ? ($.network.$split('.')[-1]) : $.network),
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes, $intnets.(
                      $prefix := $.org.$split('.')[-1] & '.' & $.vdc.$split('.')[-1];
                      {
                          $prefix & '.' & $.short: {
                              'title': $.title,
                              'symbol': 'orgnet-' & $.short,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes, 
                  $exists($extnets) ? 
                      {
                          'internet': {'title': 'Internet', 'symbol': 'internet', 'hideTitle': true}
                      }
              );
              $links := [$egw.(
                  $regexp := $eval('/.*\\.' & $.id.$split('.')[-1] & '$/');
                  $gwnode := $nodes[$regexp($.$keys())].$keys()[0];
                  $.gatewayinterfaces.(
                      $ipaddress := $exists($.subnetparticipation.ipaddress) ? $.subnetparticipation.ipaddress.($ != null ? $) : 'Routing' ;
                      $regexp := $eval('/(.*\\.|^)' & $.network.$split('.')[-1] & '$/');
                      $style := $.network in $intnets.id or $.network in $orgnets.id ? '->' : '-[#AED900]->';
                      $nodes[$regexp($.$keys())].(
                          {
                              'from': $gwnode,
                              'to': $keys()[0],
                              'style': $style,
                              'title': $ipaddress
                          }
                      )
                  )
              )];
              $links := $append($links,
                  $exists($extnets) ? 
                     $extnets.(
                          {
                              'from': ($.network != null ? ($.network.$split('.')[-1]) : $.network),
                              'to': 'internet',
                              'title': 'Внешняя сеть в интернет',
                              'style': '->'
                          }
                      )
              );
              $symbols := [];
              $symbols := $append($symbols, $egw.(
                      $href := $.link;
                      $icon := $eval($fn_svg_nsx_gateway, {'title': $.title, 'href': $href});
                      {
                          'egw-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $extnets.(
                      $netranges := $join($.subnetparticipation.($.ipranges.($.startaddress & '-' & $.endAddress)), ' ');
                      $gateway := $join($.subnetparticipation.($.gateway), ' ');
                      $netmask := $join($.subnetparticipation.($.netmask), ' ');
                      $data := {'Networks': $netranges, 'Gateway': $gateway, 'Netmask': $netmask};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'type':'extNet', 'details': $data});
                      {
                          'extnet-' & ($.network != null ? ($.network.$split('.')[-1]) : $.network): $icon
                      }
                  )
              );
              $symbols := $append($symbols, $intnets.(
                      $netranges := $join($.ipscopes.($.ipranges.($.startaddress & '-' & $.endaddress)), ' ');
                      $dnssrv := $join($.dns, ', ');
                      $fencemode := $.fencemode;
                      $data := {'Networks': $netranges, 'DNS Servers': $dnssrv, 'Fence Mode': $fencemode};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'description': $.description, 'href': $.link, 'type':'orgNet', 'details': $data});
                      {
                          'orgnet-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, 
                  ($exists($extnets) ? 
                      ( $icon := $eval($fn_svg_internet);
                        {
                            'internet': $icon
                        }
                      )
                  )
              );
              {
                  'nodes': $merge($nodes),
                  'symbols': $merge($symbols),
                  'links': $links,
                  'config': {                 
                      'distance': 200,
                      'trackWidth': 24
                  }
              };
          )
          

      schema_vdcgroup:
        type: smartants
        source: >
          (
              $id := $params.id;
              $fn_svg_block := $$.icons."reverse.general".svg_block;
              $fn_svg_nsx_gateway := $$.icons."reverse.general".svg_nsx_gateway;
              $fn_svg_internet := $$.icons."reverse.general".svg_internet;
              $egws := $reverse_vmwarecloud_egws($)[id = $id];
              $vdcgroup := $reverse_vmwarecloud_vdcgroups($)[id = $egws.vdcgroup];
              $vdcgorgnets := $reverse_vmwarecloud_orgnets($)[vdcgroup_id in $vdcgroup.id];
              $egworgnets := $reverse_vmwarecloud_orgnets($)[id in $egws.gatewayinterfaces.network];
              $vdcs := $reverse_vmwarecloud_vdcs($)[id in $vdcgroup.vdcs or id in $egworgnets.vdc];
              $vappnets := $reverse_vmwarecloud_vappnets($)[vapp in $vapps.id];
              $org := $reverse_vmwarecloud_orgs($)[id = $vdcgroup.org];
              $nodes := {$vdcgroup.org.$split('.')[-1]:{'title': 'Организация: ' & $org.title}};
              $nodes := $append($nodes, {$vdcgroup.org.$split('.')[-1] & '.' & $vdcgroup.short_id: {'title': 'VDC Group: ' & $vdcgroup.title}});
              $baseprefix := $vdcgroup.org.$split('.')[-1] & '.' & $vdcgroup.short_id;
              $nodes := $append($nodes, $vdcs.(
                      {
                          $baseprefix & '.' & $.short_id: {
                              'title': 'VDC: ' & $.title
                          }
                      }
                  )
              );
              $nodes := $append($nodes, $vdcgorgnets.(
                      $id := $.id;
                      $tmp := $;
                      $net_in_vdcs := $vdcs[$id in availablenetworks]; /* В этих видиси доступна данная сеточка */
                      $net_in_vdcs.(
                          $prefix := $baseprefix & '.' & $.short_id;
                          {
                              $prefix & '.' & $tmp.short_id: {
                                  'title': $tmp.title,
                                  'symbol': 'orgnet-' & $tmp.short_id,
                                  'hideTitle': true
                              }
                          }
                      )
                  )
              );
              $nodes := $append($nodes, $egworgnets.(
                      $id := $.id;
                      $tmp := $;
                      $net_in_vdcs := $vdcs[$id in availablenetworks]; /* В этих видиси доступна данная сеточка */
                      $net_in_vdcs.(
                          $prefix := $baseprefix & '.' & $.short_id;
                          {
                              $prefix & '.' & $tmp.short_id: {
                                  'title': $tmp.title,
                                  'symbol': 'orgnet-' & $tmp.short_id,
                                  'hideTitle': true
                              }
                          }
                      )
                  )
              );
              $nodes := $distinct($nodes);
              $nodes := $append($nodes, $egws.(
                      {
                          $baseprefix & '.' & $.short_id: {
                              'title': $.title,
                              'symbol': 'egw-' & $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $externalNetworks := $egws.($.gatewayinterfaces[iftype = 'uplink']);
              $nodes := $append($nodes, $externalNetworks.(
                          {
                              ($.network != null ? ($.network.$split('.')[-1]) : $.network): {
                                  'title': $.title,
                                  'symbol': 'extnet-' & ($.network != null ? ($.network.$split('.')[-1]) : $.network),
                                  'hideTitle': true
                              }
                          }          
                  )
              );
              $nodes := $append($nodes, 
                  $exists($externalNetworks) ? 
                      {
                          'internet': {'title': 'Internet', 'symbol': 'internet', 'hideTitle': true}
                      }
              );
              $links := [$egws.(
                  $regexp := $eval('/.*\\.' & $.short_id & '/');
                  $gwnode := $nodes[$regexp($.$keys())].$keys()[0];
                  $.gatewayinterfaces.(
                    $ipaddress := $.subnetparticipation.ipaddress;
                    $regexp := $eval('/.*\\.' & ($.network != null ? ($.network.$split('.')[-1]) : $.network) & '/');
                    $nodes[$regexp($.$keys())].(
                        {
                            'from': $gwnode,
                            'to': $keys()[0],
                            'style': '<->',
                            'title': $ipaddress
                        }
                    )
                  )
              )];
              /* Внешняя сеть */
              $links := $append($links, 
                  [$egws.(
                      $regexp := $eval('/.*\\.' & $.short_id & '/');
                      $gwnode := $nodes[$regexp($.$keys())].$keys()[0];
                      $.gatewayinterfaces.(
                          $ipaddress := $.subnetparticipation.ipaddress;
                          $regexp := $eval('/^' & ($.network != null ? ($.network.$split('.')[-1]) : $.network) & '$/');
                          $nodes[$regexp($.$keys())].(
                              {
                                  'from': $gwnode,
                                  'to': $keys()[0],
                                  'style': '-[#AED900]->',
                                  'title': $ipaddress
                              }
                          )
                      )
                )]
              );
              $links := $append($links,
                  [$vdcgorgnets.(
                      $orgnet_id := $.id;
                      $orgnet := $;
                      $regexp := $eval('/.*\\.' & $.short_id & '/');
                      $orgnetnodes := $nodes[$regexp($.$keys())].$keys()[0];
                      $map($orgnetnodes, function($v, $i, $a){
                          $i+1 < $count($a) ? (
                            {
                                'from': $v,
                                'to': $a[$i+1],
                                'style': '-[#000000]-',
                                'title': 'Orgnet shared with VDCs'
                            }
                          )
                      })
                  )]
              );
              $links := $append($links,
                  $exists($externalNetworks) ? 
                     $externalNetworks.(
                          {
                              'from': ($.network != null ? ($.network.$split('.')[-1]) : $.network),
                              'to': 'internet',
                              'title': 'Внешняя сеть в интернет',
                              'style': '->'
                          }
                      )
              );
              $symbols := $append($symbols, $vapps.(
                      $vapp := $.id;
                      $vapp_nets := $eval($fn_vappnets)[vapp = $vapp];
                      $netranges := $join($vapp_nets.($.ipscopes.($.ipranges.($.startaddress & '-' & $.endaddress))), ' ');
                      $fencemode := $join($vapp_nets.($.fencemode), ' ');
                      $vmscount := $count($vms[vapp = $vapp]);
                      $data := {'Vm`s in vapp': $string($vmscount), 'Networks': $netranges, 'Fence mode': $fencemode};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'description': $.description, 'href': $.link, 'type':'vApp', 'details': $data});
                      {
                          'vapp-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $egworgnets.(
                      $netranges := $join($.ipscopes.($.ipranges.($.startaddress & '-' & $.endaddress)), ' ');
                      $dnssrv := $join($.dns, ', ');
                      $fencemode := $.fencemode;
                      $data := {'Networks': $netranges, 'DNS Servers': $dnssrv, 'Fence Mode': $fencemode};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'description': $.description, 'href': $.link, 'type':'orgNet', 'details': $data});
                      {
                          'orgnet-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $vdcgorgnets.(
                      $netranges := $join($.ipscopes.($.ipranges.($.startaddress & '-' & $.endaddress)), ' ');
                      $dnssrv := $join($.dns, ', ');
                      $fencemode := $.fencemode;
                      $data := {'Networks': $netranges, 'DNS Servers': $dnssrv, 'Fence Mode': $fencemode};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'description': $.description, 'href': $.link, 'type':'vdcgorgNet', 'details': $data});
                      {
                          'orgnet-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $egws.(
                      $icon := $eval($fn_svg_nsx_gateway, {'title': $.title, 'href': $.link});
                      {
                          'egw-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $externalNetworks.(
                      $netranges := $join($.subnetparticipation.($.ipranges.($.startaddress & '-' & $.endAddress)), ' ');
                      $gateway := $join($.subnetparticipation.($.gateway), ' ');
                      $netmask := $join($.subnetparticipation.($.netmask), ' ');
                      $data := {'Networks': $netranges, 'Gateway': $gateway, 'Netmask': $netmask};
                      $icon := $eval($fn_svg_block, {'title': $.title, 'type':'extNet', 'details': $data});
                      {
                          'extnet-' & ($.network != null ? ($.network.$split('.')[-1]) : $.network): $icon
                      }
                  )
              );
              $symbols := $append($symbols, 
                  ($exists($externalNetworks) ? 
                      ( $icon := $eval($fn_svg_internet);
                        {
                            'internet': $icon
                        }
                      )
                  )
              );
              {
                  'nodes': $merge($nodes),
                  'symbols': $merge($symbols),
                  'links': $links,
                  'config': {                 
                      'distance': 200,
                      'trackWidth': 24
                  }
              };
          )

      list:
        type: table
        headers:
          - value: title
            text: Наименование Edge Gateway
            sortable: true
            align: left
            link: link
            width: 300
          - value: description
            text: Описание
            align: left
            width: 300
          - value: type
            text: Тип Edge Gateway
            sortable: true
            align: left
          - value: interfaces
            text: Интерфейсы
            align: left
          - value: vdc_title
            text: VDC
            align: left
            sortable: true
            width: 200
            link: vdc_link
          - value: org_title
            text: Организация
            align: left
            sortable: true
            width: 200
            link: org_link
        source: >
          (
              $domain := $params.domain;
              $vdc := $params.vdc;
              $vdcgroup_id := $params.vdcgroup;
              $tmp := $exists($vdc) ? (
                          [$reverse_vmwarecloud_egws($, $domain)[vdc = $vdc]]
              ) : (
                      $exists($vdcgroup_id) ? (
                          $direct := [$reverse_vmwarecloud_egws($, $domain)[vdcgroup = $vdcgroup_id]];
                          $vdcgroups := $reverse_vmwarecloud_vdcgroups($, $domain)[id = $vdcgroup_id];
                          $indirect := [$reverse_vmwarecloud_egws($, $domain)[vdc in $vdcgroups.vdcs]];
                          $append($direct, $indirect)
                  ) : ([$reverse_vmwarecloud_egws($, $domain)])
              );
              $distinct($tmp ~> | $ | {'interfaces': gatewayinterfaces.subnetparticipation.ipaddress}|)
          )

      networks_list:
        type: table
        headers:
          - value: title
            text: Наименование сети
            sortable: true
            align: left
            link: orgnet_link
            width: 200
          - value: iftype
            text: Тип интерфейса
            sortable: true
            align: left
          - value: connected
            text: Статус подключения
            align: left
          - value: gateway
            text: Адрес шлюза
            align: left
          - value: ipaddress
            text: IP адрес интерфейса
            align: left
          - value: ipranges
            text: Диапазон адресов
            align: left
            width: 300
          - value: vdc_title
            text: VDC
            align: left
            sortable: true
            width: 200
            link: vdc_link
          - value: org_title
            text: Организация
            align: left
            sortable: true
            width: 200
            link: org_link
          - value: description
            text: Описание
            align: left
            width: 300
        source: >
          (
              $id := $params.id;
              $egw := $reverse_vmwarecloud_egws($)[id = $id];
              $orgnets := $reverse_vmwarecloud_orgnets[id in $egw.gatewayinterfaces.network];
              [$egw.gatewayinterfaces ~> | $ | (
                  $id := network;
                  $orgnet := $orgnets[id = $id];
                  {
                      'title': $orgnet.title,
                      'description': $orgnet.description,
                      'connected': connected = true ? '✅' : '❌',
                      'gateway': $join(subnetparticipation.gateway, '\n'),
                      'ipaddress': $not(null in subnetparticipation.ipaddress) ? $join(subnetparticipation.ipaddress, '\n') : subnetparticipation.ipaddress.($ != null ? $),
                      'ipranges': $join(subnetparticipation.ipranges.($.startaddress & ' - ' &  $.endaddress), '\n'),
                      'vdc_title': $orgnet.vdc_title,
                      'vdc_link': $orgnet.vdc_link,
                      'org_title': $orgnet.org_title,
                      'org_link': $orgnet.org_link
                  }
              )|]     
          )