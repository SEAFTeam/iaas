entities:
  seaf.ta.reverse.vmwarecloud.egws_nat:
    presentations:
      dnat_list:
        type: table
        headers:
          - value: title
            text: Наименование сети
            sortable: true
            align: left
            link: link
            width: 200
          - value: type
            text: Тип NAT
            sortable: true
            align: left
          - value: enabled
            text: Статус
            align: center
          - value: external_address
            text: Внешний адрес
            align: left
          - value: internal_address
            text: Внутренний адрес
            align: left
          - value: dnat_ext_port
            text: Внешний порт
            align: left
          - value: fw_match
            text: FW
            align: left
          - value: vm_title
            text: Виртуальная машина
            align: left
            link: vm_link
        source: >
          (
              $id := $params.id;
              $vms := $reverse_vmwarecloud_vms($);
              $egw := $reverse_vmwarecloud_egws($)[id = $id];
              $nats := $reverse_vmwarecloud_egws_nat($)[gw = $egw.id][type = 'DNAT'];
              [$nats ~> | $ |(
                  $internal_address := internal_address;
                  $vm := $vms[$internal_address in addresses];
                  {
                      'vm_title': $vm.title,
                      'vm_link': $vm.link,
                      'enabled': enabled = true ? '✅' : '❌'
                  }
              )|]
          )

      snat_list:
        type: table
        headers:
          - value: title
            text: Наименование сети
            sortable: true
            align: left
            link: link
            width: 200
          - value: type
            text: Тип NAT
            sortable: true
            align: left
          - value: enabled
            text: Статус
            align: center
          - value: external_address
            text: Внешний адрес
            align: left
          - value: internal_address
            text: Внутренний адрес
            align: left
          - value: snat_dst_address
            title: Адрес назначения SNAT
            align: left
          - value: fw_match
            text: FW
            align: left
          - value: obj_title
            text: Виртуальная машина/Сеть
            align: left
            link: obj_link
        source: >
          (
              $id := $params.id;
              $vms := $reverse_vmwarecloud_vms($);
              $egw := $reverse_vmwarecloud_egws($)[id = $id];
              $orgnets := $reverse_vmwarecloud_orgnets($)[id in $egw.gatewayinterfaces.network];
              $nats := $reverse_vmwarecloud_egws_nat($)[gw = $egw.id][type = 'SNAT'];
              [$nats ~> | $ |(
                  $internal_address := internal_address;
                  $matcher := /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}$/;
                  $obj := $not($exists($matcher($internal_address))) ? (
                            $vm := $vms[$internal_address in addresses];
                            {
                                'title': $vm.title,
                                'link': $vm.link
                            }
                            ) : (
                            $orgnets.(
                                $title := $.title;
                                $orgnet_link := $.link;
                                $.ipscopes.(
                                    $gw := $.gateway;
                                    $reverse_general_match_ip_to_subnet($internal_address, $gw) ?
                                        {
                                            'title': $title,
                                            'link': $orgnet_link
                                        }
                                )
                            )
                      ); 
                  {
                      'obj_title': $obj.title,
                      'obj_link': $obj.link,
                      'enabled': enabled = true ? '✅' : '❌'
                  }
              )|]
          )

      dnat_schema:
        type: smartants
        source: >
          (
              $id := $params.id;
              $fn_svg_nsx_gateway := $$.icons."reverse.general".svg_nsx_gateway;
              $fn_svg_vm := $$.icons."reverse.general".svg_vm;
              $fn_svg_internet := $$.icons."reverse.general".svg_internet;
              $nat := $reverse_vmwarecloud_egws_nat($)[id = $id];
              $vm := $reverse_vmwarecloud_vms($)[$nat.internal_address in addresses];
              $vapp := $reverse_vmwarecloud_vapps($)[id = $vm.vapp];
              $vdc := $reverse_vmwarecloud_vdcs($)[id = $vapp.vdc];
              $egw := $reverse_vmwarecloud_egws($)[id = $nat.gw];
              $symbols := [];
              $links := [];
              /* Безусловный блок */
              $nodes := {$egw.org.$split('.')[-1]:{'title': 'Организация: ' & $egw.org_title}};
              $nodes := $append($nodes, {$egw.org.$split('.')[-1] & '.' & $egw.vdc.$split('.')[-1]: {'title': 'VDC: ' & $egw.vdc_title}});
              $nodes := $append($nodes, (
                      $prefix := $egw.org.$split('.')[-1] & '.' & $egw.vdc.$split('.')[-1];
                      {
                          $prefix & '.' & $egw.short_id: {
                              'title': $egw.title,
                              'symbol': 'egw-' & $egw.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes,
                  {
                      'internet': {'title': 'Internet', 'symbol': 'internet', 'hideTitle': true}
                  }
              );
              $links := $append($links, (
                      $matcher := $eval('/.*\\.' & $egw.short_id & '$/');
                      $nodes[$matcher($.$keys())].(
                          {
                              'from': 'internet',
                              'to': $keys()[0],
                              'style': '->',
                              'title': 'IP: ' & $nat.external_address & ' Port: ' & $nat.dnat_ext_port
                          }
                      )
                  )
              );
              $symbols := $append($symbols, (
                      $icon := $eval($fn_svg_internet);
                        {
                            'internet': $icon
                        }
                  )
              );
              $symbols := $append($symbols, $egw.(
                      $href := $.link;
                      $icon := $eval($fn_svg_nsx_gateway, {'title': $.title, 'href': $href});
                      {
                          'egw-' & $.short_id: $icon
                      }
                  )
              );
              /* Конец безусловного блока */
          
              /* Если виртуалки нет */
              $nodes := $append($nodes, $not($exists($vm)) ? (
                      {
                          $nat.internal_address.$replace('.', ''): {
                              'title': $nat.internal_address,
                              'symbol': 'system'
                          }
                      }
                  )
              );
              $links := $append($links, $not($exists($vm)) ? (
                      $matcher := $eval('/.*\\.' & $egw.short_id & '$/');
                      $from := $nodes[$matcher($.$keys())].$keys()[0];
                      {
                          'from': $from,
                          'to': $nat.internal_address.$replace('.', ''),
                          'style': '->',
                          'title': 'IP: ' & $nat.internal_address
                      }
                  )
              );
              /*  Конец блока если виртуалки нет */
          
              /* Если есть соответсвующая виртуальная машина */
              $nodes := $append($nodes, $exists($vm) ? (
                      $nodes := $append($nodes, {$vapp.org.$split('.')[-1] & '.' & $vdc.short_id: {'title': 'VDC: ' & $vdc.title}});
                      $nodes := $append($nodes, {$vapp.org.$split('.')[-1] & '.' & $vapp.vdc.$split('.')[-1] & '.' & $vapp.short_id: {'title': 'vApp: ' & $vapp.title}});
                      $nodes := $append($nodes, $vm.(
                              $prefix := $vapp.org.$split('.')[-1] & '.' & $vapp.vdc.$split('.')[-1] & '.' & $vapp.short_id;
                              {
                                  $prefix & '.' & $.short_id: {
                                      'title': $.title,
                                      'symbol': 'vm-' & $.short_id,
                                      'hideTitle': true
                                  }
                              }
                          )
                      )
                  )
              );
              $links := $append($links, $exists($vm) ? (
                      $matcher_from := $eval('/.*\\.' & $egw.short_id & '$/');
                      $from := $nodes[$matcher_from($.$keys())].$keys()[0];
                      $matcher_to := $eval('/.*\\.' & $vm.short_id & '$/');
                      $to := $nodes[$matcher_to($.$keys())].$keys()[0];
                      {
                          'from': $from[0],
                          'to': $to,
                          'style': '->',
                          'title': 'IP: ' & $nat.internal_address
                      }
                  )
              );
              $symbols := $append($symbols, $exists($vm) ? (
                      $symbols := $append($symbols, $vm.(
                              $href := $.link;
                              $icon := $eval($fn_svg_vm, {'title': $.title, 'href': $href});
                              {
                                  'vm-' & $.short_id: $icon
                              }
                          )
                      )
                  )
              );
              /* Конец блока про виртуалку */
              {
                  'nodes': $merge($nodes),
                  'symbols': $merge($symbols),
                  'links': $links,
                  'config': {                 
                      'distance': 120,
                      'trackWidth': 24
                  }
              };
          )

      snat_schema:
        type: smartants
        source: >
          (
              $id := $params.id; /* sber.berezka.egws_nat.9e9aaabb-ecda-4f88-8d25-98cd528e6563 */
              $fn_svg_nsx_gateway := $$.icons."reverse.general".svg_nsx_gateway;
              $fn_svg_vm := $$.icons."reverse.general".svg_vm;
              $fn_svg_internet := $$.icons."reverse.general".svg_internet;
              $fn_svg_block := $$.icons."reverse.general".svg_block;
              $nat := $reverse_vmwarecloud_egws_nat($)[id = $id];
              $vm := $reverse_vmwarecloud_vms($)[$nat.internal_address in addresses];
              $vapp := $reverse_vmwarecloud_vapps($)[id = $vm.vapp];
              $vdc := $reverse_vmwarecloud_vdcs($)[id = $vapp.vdc];
              $egw := $reverse_vmwarecloud_egws($)[id = $nat.gw];
              $org := $reverse_vmwarecloud_orgs($)[id = $egw.org];
              $orgnets := $reverse_vmwarecloud_orgnets($)[id in $egw.gatewayinterfaces.network];
              $symbols := [];
              $links := [];
              /* Безусловный блок */
              $nodes := {$egw.org.$split('.')[-1]:{'title': 'Организация: ' & $org.title}};
              $baseprefix := $exists($egw.vdc) and $egw.vdc != null ? ($egw.org.$split('.')[-1] & '.' & $egw.vdc.$split('.')[-1]) : ($egw.org.$split('.')[-1] & '.' & $egw.vdcgroup_id.$split('.')[-1]);
              $basetitle := $exists($egw.vdc) and $egw.vdc != null ? ('VDC: ' & $egw.vdc_title) : ('VDC Group: ' & $egw.vdcgroup_title);
              $nodes := $append($nodes, {$baseprefix: {'title': $basetitle}});
              $nodes := $append($nodes, (
                      $prefix := $baseprefix;
                      {
                          $prefix & '.' & $egw.short_id: {
                              'title': $egw.title,
                              'symbol': 'egw-' & $egw.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes,
                  {
                      'internet': {'title': 'Internet', 'symbol': 'internet', 'hideTitle': true}
                  }
              );
              $links := $append($links, (
                      $matcher := $eval('/.*\\.' & $egw.short_id & '$/');
                      $nodes[$matcher($.$keys())].(
                          {
                              'from': $keys()[0],
                              'to': 'internet',
                              'style': '->',
                              'title': 'IP: ' & $nat.external_address
                          }
                      )
                  )
              );
              $symbols := $append($symbols, (
                      $icon := $eval($fn_svg_internet);
                        {
                            'internet': $icon
                        }
                  )
              );
              $symbols := $append($symbols, $egw.(
                      $href := $.link;
                      $icon := $eval($fn_svg_nsx_gateway, {'title': $.title, 'href': $href});
                      {
                          'egw-' & $.short_id: $icon
                      }
                  )
              );
              /* Конец безусловного блока */
          
              /* Если виртуалки нет и это не сеть */
              $cidr_matcher := /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}$/;
              $nodes := $append($nodes, $not($exists($vm)) and $not($exists($cidr_matcher($nat.internal_address))) ? (
                      {
                          $nat.internal_address.$replace('.', ''): {
                              'title': $nat.internal_address,
                              'symbol': 'system'
                          }
                      }
                  )
              );
              $links := $append($links, $not($exists($vm)) and $not($exists($cidr_matcher($nat.internal_address))) ? (
                      $matcher := $eval('/.*\\.' & $egw.short_id & '$/');
                      $to := $nodes[$matcher($.$keys())].$keys()[0];
                      {
                          'from': $nat.internal_address.$replace('.', ''),
                          'to': $to,
                          'style': '->',
                          'title': 'IP: ' & $nat.internal_address
                      }
                  )
              );
              /*  Конец блока если виртуалки нет и это не сеть */
              /* Если это сеть */
              $cidr_matcher := /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}$/;
              $nodes := $append($nodes, $cidr_matcher($nat.internal_address) ? (
                      $orgnet := $orgnets.(
                          $o := $;
                          $.ipscopes.(
                              $gw := $.gateway;
                              $reverse_general_match_ip_to_subnet($nat.internal_address, $gw) ? $o
                          )
                      );
                      {
                          $orgnet.org.$split('.')[-1] & '.' & $orgnet.vdc.$split('.')[-1] & '.' & $orgnet.short_id: {
                              'title': $orgnet.title,
                              'symbol': 'orgnet-' & $orgnet.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $links := $append($links, $cidr_matcher($nat.internal_address) ? (
                      $to_matcher := $eval('/.*\\.' & $egw.short_id & '$/');
                      $to := $nodes[$to_matcher($.$keys())].$keys()[0];
                      $orgnet := $orgnets.(
                          $o := $;
                          $.ipscopes.(
                              $gw := $.gateway;
                              $reverse_general_match_ip_to_subnet($nat.internal_address, $gw) ? $o
                          )
                      );
                      $from_matcher := $eval('/.*\\.' & $orgnet.short_id & '$/');
                      $from := $nodes[$from_matcher($.$keys())].$keys()[0];
                      {
                          'from': $from,
                          'to': $to,
                          'style': '->',
                          'title': 'IP: ' & $nat.internal_address
                      }
                  )
              );
              $symbols := $append($symbols, $cidr_matcher($nat.internal_address) ? (
                      $orgnet := $orgnets.(
                          $o := $;
                          $.ipscopes.(
                              $gw := $.gateway;
                              $reverse_general_match_ip_to_subnet($nat.internal_address, $gw) ? $o
                          )
                      );
                      $orgnet.(
                          $netranges := $join($.ipscopes.($.ipranges.($.startaddress & '-' & $.endaddress)), ' ');
                          $dnssrv := $join($.dns, ', ');
                          $fencemode := $.fencemode;
                          $data := {'Networks': $netranges, 'DNS Servers': $dnssrv, 'Fence Mode': $fencemode};
                          $icon := $eval($fn_svg_block, {'title': $.title, 'description': $.description, 'href': $.link, 'type':'orgNet', 'details': $data});
                          {
                              'orgnet-' & $.short_id: $icon
                          }
                      )
                  )
              );
              /*  Конец блока если это сеть */
          
              /* Если есть соответсвующая виртуальная машина */
              $nodes := $append($nodes, $exists($vm) ? (
                      $nodes := $append($nodes, {$vapp.org.$split('.')[-1] & '.' & $vdc.short_id: {'title': 'VDC: ' & $vdc.title}});
                      $nodes := $append($nodes, {$vapp.org.$split('.')[-1] & '.' & $vapp.vdc.$split('.')[-1] & '.' & $vapp.short_id: {'title': 'vApp: ' & $vapp.title}});
                      $nodes := $append($nodes, $vm.(
                              $prefix := $vapp.org.$split('.')[-1] & '.' & $vapp.vdc.$split('.')[-1] & '.' & $vapp.short_id;
                              {
                                  $prefix & '.' & $.short_id: {
                                      'title': $.title,
                                      'symbol': 'vm-' & $.short_id,
                                      'hideTitle': true
                                  }
                              }
                          )
                      )
                  )
              );
              $links := $append($links, $exists($vm) ? (
                      $matcher_from := $eval('/.*\\.' & $egw.short_id & '$/');
                      $from := $nodes[$matcher_from($.$keys())].$keys()[0];
                      $matcher_to := $eval('/.*\\.' & $vm.short_id & '$/');
                      $to := $nodes[$matcher_to($.$keys())].$keys()[0];
                      {
                          'from': $from[0],
                          'to': $to,
                          'style': '->',
                          'title': 'IP: ' & $nat.internal_address
                      }
                  )
              );
              $symbols := $append($symbols, $exists($vm) ? (
                      $symbols := $append($symbols, $vm.(
                              $href := $.link;
                              $icon := $eval($fn_svg_vm, {'title': $.title, 'href': $href});
                              {
                                  'vm-' & $.short_id: $icon
                              }
                          )
                      )
                  )
              );
              /* Конец блока про виртуалку */
              {
                  'nodes': $merge($nodes),
                  'symbols': $merge($symbols),
                  'links': $links,
                  'config': {                 
                      'distance': 120,
                      'trackWidth': 24
                  }
              };
          )