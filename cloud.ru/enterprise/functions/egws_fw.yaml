functions:
    reverse_enterprise_egws_fw:
        title: Список FW правил на Edge
        params:
            - alias: dataset
              type: object
              title: Озеро данных
              required: true  # Признак обязательности параметра функции
            - alias: domain
              type: string
              title: Домен организации
              required: false  # Признак обязательности параметра функции
        code: >
            (
                $domain := domain;
                $egw_entity_matcher := /.*\.enterprise\.egws$/;
                $egws_fw_entity_matcher := /.*\.enterprise\.egws_fw$/;
                $domain_matcher := $eval('/^' & $domain & '.*/');
                $egw_entity := dataset.entities.$spread()[$egw_entity_matcher($keys())].$keys()[0];
                $egws_fw_entity := dataset.entities.$spread()[$egws_fw_entity_matcher($keys())].$keys()[0];
                $egws := dataset.$spread()[$egw_entity_matcher($keys())].*.$spread()[$domain_matcher($keys())];
                $egws_fw := dataset.$spread()[$egws_fw_entity_matcher($keys())].*.$spread()[$domain_matcher($keys())];
                [[$egws_fw.$spread().{
                    'id': $keys(),
                    'fw': *
                }].(
                    $gw_id := nat.gw_id;
                    $egw := $egws[$keys() = $gw_id];
                    $context := $;
                    $src := $not($exists(fw.sourceFirewallGroups.*)) ? 'Any' : $append(
                            ($not(null in fw.sourceFirewallGroups.**.members) ? fw.sourceFirewallGroups.**.members), 
                            ($not(null in fw.sourceFirewallGroups.**.ip_addresses) ? fw.sourceFirewallGroups.**.ip_addresses));
                    $dst := $not($exists(fw.destinationFirewallGroups.*)) ? 'Any' : $append(
                            ($not(null in fw.destinationFirewallGroups.**.members) ? fw.destinationFirewallGroups.**.members), 
                            ($not(null in fw.destinationFirewallGroups.**.ip_addresses) ? fw.destinationFirewallGroups.**.ip_addresses));
                    $ports := $not($exists(fw.port_profiles.*)) ? {'port': 'Any', 'protocol': 'Any' } : (
                            fw.port_profiles.*.(
                                $proto := protocol;
                                dst_ports.(
                                    {'port': $, 'protocol': $proto}
                                )
                            )
                    );
                    $src.(
                        $source := $;
                        $dst.(
                            $destination := $;
                            $ports.(
                                $port_profile := $;
                                {
                                    'id': $context.id,
                                    'short_id': $context.fw.id,
                                    'gw_id': $context.fw.gw_id,
                                    'name': $context.fw.name,
                                    'description': $context.fw.description,
                                    'enabled': $context.fw.enabled,
                                    'source': $source,
                                    'destination': $destination,
                                    'ip_protocol': $context.fw.ip_protocol,
                                    'action': $context.fw.action,
                                    'direction': $context.fw.direction,
                                    'protocol': $port_profile.protocol,
                                    'port': $port_profile.port,
                                    'egw_name': $egw.*.name,
                                    'egw_id': $egw.$keys()[0],
                                    'fw_link': '/entities/' & $egws_fw_entity & '/card?id=' & id,
                                    'egw_link': '/entities/' & $egw_entity & '/card?id=' & $egw.*.id,
                                    'entity': $egws_fw_entity
                                }
                            )
                        )
                    )
                )]
            )