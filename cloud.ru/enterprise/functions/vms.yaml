functions:
  reverse_enterprise_vms:
    title: Список виртуальных машин
    params:
        - alias: dataset
          type: object
          title: Озеро данных
          required: true  # Признак обязательности параметра функции
        - alias: domain
          type: string
          title: Домен организации
          required: false  # Признак обязательности параметра функции
    code: >
        (
            $domain := domain;
            $vm_entity_matcher := /.*\.enterprise\.vms$/;
            $vapp_entity_matcher := /.*\.enterprise\.vapps$/;
            $vdc_entity_matcher := /.*\.enterprise\.vdcs$/;
            $edr_entity_matcher := /.*\.enterprise\.edrs$/;
            $av_entity_matcher := /.*\.enterprise\.avs$/;
            $domain_matcher := $eval('/^' & $domain & '.*/');
            $vm_entity := dataset.entities.$spread()[$vm_entity_matcher($keys())].$keys()[0];
            $vapp_entity := dataset.entities.$spread()[$vapp_entity_matcher($keys())].$keys()[0];
            $vdc_entity := dataset.entities.$spread()[$vdc_entity_matcher($keys())].$keys()[0];
            $edr_entity := dataset.entities.$spread()[$edr_entity_matcher($keys())].$keys()[0];
            $av_entity := dataset.entities.$spread()[$av_entity_matcher($keys())].$keys()[0];
            $vms := dataset.$spread()[$vm_entity_matcher($keys())].*.$spread()[$domain_matcher($keys())];
            $vapps := dataset.$spread()[$vapp_entity_matcher($keys())].*.$spread()[$domain_matcher($keys())];
            $vdcs := dataset.$spread()[$vdc_entity_matcher($keys())].*.$spread()[$domain_matcher($keys())];
            $edrs := dataset.$spread()[$edr_entity_matcher($keys())].*.$spread()[$domain_matcher($keys())];
            $avs := dataset.$spread()[$av_entity_matcher($keys())].*.$spread()[$domain_matcher($keys())];
            [[$vms.$spread().{
                'id': $keys(),
                'vm': *
            }].(
                $disks := $join(vm.disks.(*.device & ' - ' & *.type & ' - ' & *.size & 'Gb'), '\n');
                $addresses := $count(vm.addresses) > 1 ? $join(vm.addresses.($), ', ') : vm.addresses;
                $vapp_id := vm.vapp_id;
                $vapp := $vapps.$spread()[$keys() = $vapp_id];
                $subnets := $count(vm.subnets) > 1 ? $join(vm.subnets.($), ', ') : vm.subnets;
                $vdc_id := vm.vdc_id;
                $vdc := $vdcs.$spread()[$keys() = $vdc_id];
                $av := vm.name in $avs.**.hosts ? true : false;
                $edr := vm.name in $edrs.**.hosts ? true : false;
                {
                    'id': id,
                    'short_id': vm.id,
                    'name': vm.name,
                    'description': vm.description,
                    'os_type': vm.os.type,
                    'os_bit': vm.os.bit,
                    'cpu_qty': vm.cpu.cores,
                    'ram': vm.ram / 1024,
                    'flavor': 'Здесь нет flavor',
                    'disks': $disks,
                    'nic_qty': vm.nic_qty,
                    'addresses': vm.addresses,
                    'vapp': $vapp.*.name,
                    'vapp_id': $vapp_id,
                    'av': $av,
                    'edr': $edr,
                    'subnet': $subnets,
                    'subnet_ids': vm.subnet_ids,
                    'az': 'Здесь нет зоны доступности',
                    'tags': $join(vm.tags.($.key & ': ' & $.value), "\n"),
                    'vdc': vm.vdc_name,
                    'vdc_id': vm.vdc_id,
                    'org': $vdc.*.org_name,
                    'tenant': 'Нет тенанта',
                    'dc': vm.DC,
                    'vm_link': '/entities/' & $vm_entity & '/card?id=' & id,
                    'vapp_link': '/entities/' & $vapp_entity & '/card?id=' & $vapp_id,
                    'vdc_link': '/entities/' & $vdc_entity & '/card?id=' & $vdc_id,
                    'entity': $vm_entity
                }
            )]
        )