entities:
  seaf.ta.reverse.cloud_ru.enterprise.orgnets:
    presentations:
      card:
        title: Карточка объекта
        type: markdown
        template: templates/orgnet_card.md
        source: >
          (   
              $id := $params.id;
              $fn_egw := $$.functions."reverse.enterprise".egws;
              $orgnets := $reverse_enterprise_orgnets($)[id = $id];
              $egws := $reverse_enterprise_egws($)[$id in gatewayinterfaces.network_id];
              $orgnets ~> | $ | {'egws': $egws} |
          )

      schema:
        type: smartants
        source: >
          (
              $id := $params.id;
              $fn_svg_block := $$.icons."reverse.general".svg_block;
              $fn_svg_vm := $$.icons."reverse.general".svg_vm;
              $fn_svg_nsx_gateway := $$.icons."reverse.general".svg_nsx_gateway;
              $fn_svg_internet := $$.icons."reverse.general".svg_internet;
              $orgnet := $reverse_enterprise_orgnets($)[id = $id];
              $orgnets := $reverse_enterprise_orgnets($);
              $egws := $reverse_enterprise_egws($)[$id in gatewayinterfaces.network_id];
              $vappnets := $reverse_enterprise_vappnets($)[parentnetwork_id = $orgnet.id];
              $vapps := $reverse_enterprise_vapps($)[id in $vappnets.vapp_id];
              $vms := $reverse_enterprise_vms($)[vapp_id in $vapps.id];
              $nodes := {$orgnet.org_id.$split('.')[-1]: {'title': 'Организация: ' & $orgnet.org_name}};
              $nodes := $append($nodes, {$orgnet.org_id.$split('.')[-1] & '.' & $orgnet.vdc_id.$split('.')[-1]: {'title': 'VDC: ' & $orgnet.vdc_name}});
              $nodes := $append($nodes, {$orgnet.org_id.$split('.')[-1] & '.' & $orgnet.vdc_id.$split('.')[-1] & '.' & $orgnet.short_id: {'title': 'orgNet: ' & $orgnet.name}});
              $nodes := $append($nodes, $vapps.(
                      $prefix := $orgnet.org_id.$split('.')[-1] & '.' & $orgnet.vdc_id.$split('.')[-1] & '.' & $orgnet.short_id;
                      {
                          $prefix & '.' & $.short_id: {
                              'title': $.name,
                              'symbol': 'vapp-' & $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes, $vms.(
                      $prefix := $orgnet.org_id.$split('.')[-1] & '.' & $orgnet.vdc_id.$split('.')[-1] & '.' & $orgnet.short_id & '.' & $.vapp_id.$split('.')[-1];
                      {
                          $prefix & '.' & $.short_id: {
                              'title': $.name,
                              'symbol': $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes, $egws.(
                      $prefix := $orgnet.org_id.$split('.')[-1] & '.' & $orgnet.vdc_id.$split('.')[-1];
                      {
                          $prefix & '.' & $.short_id: {
                              'title': $.name,
                              'symbol': 'egw-' & $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $extnets := $egws.(
                  $.gatewayinterfaces.(
                      $netid := $.network_id;
                      $not($orgnet.id = $netid) and $not($netid in $orgnets.id) ? (
                          $
                      )
                  )
              );
              $intnets := $egws.(
                  $.gatewayinterfaces.(
                      $netid := $.network_id;
                      $not($orgnet.id = $netid) and ($netid in $orgnets.id) ? (
                          $orgnets[id = $netid]
                      )
                  )
              );
              $nodes := $append($nodes, $extnets.(
                      {
                          $.network_id.$split('.')[-1]: {
                              'title': $.name,
                              'symbol': 'extnet-' & $.network_id.$split('.')[-1],
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes, $intnets.(
                      $prefix := $.org_id.$split('.')[-1] & '.' & $.vdc_id.$split('.')[-1];
                      {
                          $prefix & '.' & $.short_id: {
                              'title': $.name,
                              'symbol': 'orgnet-' & $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes, 
                  $exists($extnets) ? 
                      {
                          'internet': {'title': 'Internet', 'symbol': 'internet', 'hideTitle': true}
                      }
              );
          
              $links := [$egws.(
                      $regexp := $eval('/.*\\.' & $.short_id & '$/');
                      $gwnode := $nodes[$regexp($.$keys())].$keys()[0];
                      $.gatewayinterfaces.(
                          $ipaddress := $exists($.subnetparticipation.ipaddress) ? $.subnetparticipation.ipaddress : 'Routing' ;
                          $regexp := $eval('/(.*\\.|^)' & $.network_id.$split('.')[-1] & '$/');
                          $style := $.network_id.$split('.')[-1] in $intnets.short_id or $.network_id.$split('.')[-1] = $orgnet.short_id ? '->' : '-[#AED900]->';
                          $nodes[$regexp($.$keys())].(
                              {
                                  'from': $gwnode,
                                  'to': $keys()[0],
                                  'style': $style,
                                  'title': $ipaddress
                              }
                          )
                      )
                )];
              $links := $append($links,
                  $exists($extnets) ? 
                     $extnets.(
                          {
                              'from': $.network_id.$split('.')[-1],
                              'to': 'internet',
                              'title': 'Внешняя сеть в интернет',
                              'style': '->'
                          }
                      )
              );
              
              $symbols := $vms.(
                  $href := $.vm_link;
                  $icon := $eval($fn_svg_vm, {'name': $.name, 'href': $href});
                  {
                      $.short_id: $icon
                  }
              );
              $symbols := $append($symbols, $vapps.(
                      $href := $.vapp_link;
                      $icon := $eval($fn_svg_block, {'name': $.name, 'description': $.description, 'href': $href, 'type':'vApp'});
                      {
                          'vapp-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $egws.(
                      $href := $.egw_link;
                      $icon := $eval($fn_svg_nsx_gateway, {'name': $.name, 'href': $href});
                      {
                          'egw-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $extnets.(
                      $netranges := $join($.subnetparticipation.($.ipranges.($.startaddress & '-' & $.endAddress)), ' ');
                      $gateway := $join($.subnetparticipation.($.gateway), ' ');
                      $netmask := $join($.subnetparticipation.($.netmask), ' ');
                      $data := {'Networks': $netranges, 'Gateway': $gateway, 'Netmask': $netmask};
                      $icon := $eval($fn_svg_block, {'name': $.name, 'type':'extNet', 'details': $data});
                      {
                          'extnet-' & $.network_id.$split('.')[-1]: $icon
                      }
                  )
              );
              $symbols := $append($symbols, $intnets.(
                      $netranges := $join($.ipscopes.($.ipranges.($.startaddress & '-' & $.endaddress)), ' ');
                      $dnssrv := $join($.dns, ', ');
                      $fencemode := $.fencemode;
                      $data := {'Networks': $netranges, 'DNS Servers': $dnssrv, 'Fence Mode': $fencemode};
                      $icon := $eval($fn_svg_block, {'name': $.name, 'description': $.description, 'href': $.orgnet_link, 'type':'orgNet', 'details': $data});
                      {
                          'orgnet-' & $.short_id: $icon
                      }
                  )
              );
              $symbols := $append($symbols, 
                  ($exists($extnets) ? 
                      ( $icon := $eval($fn_svg_internet);
                        {
                            'internet': $icon
                        }
                      )
                  )
              );
              {
                'nodes': $merge($nodes),
                'symbols': $merge($symbols),
                'links': $links,
                'config': {                 
                    'distance': 120,
                    'trackWidth': 24
                }
              };
          )

      list:
        title: Реестр сетей
        type: table
        headers:
          - value: name
            text: Наименование сети
            sortable: true
            align: left
            link: orgnet_link
            width: 300
          - value: description
            text: Описание
            align: left
            width: 300
          - value: type
            text: Тип сети
            sortable: true
            align: left
          - value: gateway
            text: Адрес шлюза
            align: left
          - value: netmask
            text: Маска подсети
            align: left
          - value: fencemode
            text: Fence Mode
            align: left
          - value: connected
            text: Статус подключения
            align: left
          - value: addresses
            text: Диапазоны адресов
            align: left
          - value: vdc_name
            text: VDC
            align: left
            sortable: true
            width: 200
            link: vdc_link
          - value: org_name
            text: Организация
            align: left
            sortable: true
            width: 200
            link: org_link
        source: >
          (
              $domain := $params.domain;
              $vdc_id := $params.vdc_id;
              $tmp := $exists($vdc_id) ? [$reverse_enterprise_orgnets($, $domain)[vdc_id = $vdc_id]] : [$reverse_enterprise_orgnets($, $domain)];
          )