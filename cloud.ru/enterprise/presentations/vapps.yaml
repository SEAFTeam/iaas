entities:
  seaf.ta.reverse.cloud_ru.enterprise.vapps:
    presentations:
      card:
        type: markdown
        template: templates/vapp_card.md
        source: >
          (   
              $id := $params.id;
              $vapp := $reverse_enterprise_vapps($)[id = $id];
              $vappnets := $reverse_enterprise_vappnets($)[vapp_id = $id];
              $vapp ~> | $ |{'networks': $vappnets, 'networkexists': $exists($vappnets)} |
          )

      schema:
        type: smartants
        source: >
          (
              $id := $params.id;
              $vapp := $reverse_enterprise_vapps($)[id = $id];
              $vms := $reverse_enterprise_vms($)[vapp_id = $vapp.id];
              $vdc := $reverse_enterprise_vdcs($)[id = $vapp.vdc_id];
              $vdcgroups := $reverse_enterprise_vdcgroups($)[$vdc.id in vdc_ids];
              $vappnets := $reverse_enterprise_vappnets($)[$id = vapp_id];
              $nodes := {$vapp.org_id.$split('.')[-1]:{'title': 'Организация: ' & $vapp.org_name}};
              $baseprefix := $vapp.org_id.$split('.')[-1] & '.' & $vapp.vdc_id.$split('.')[-1];
              $nodes := $append($nodes, {$baseprefix: {'title': 'VDC: ' & $vapp.vdc_name}});
              $nodes := $append($nodes, {$baseprefix & '.' & $vapp.short_id: {'title': 'vApp: ' & $vapp.name}});
              $nodes := $append($nodes, $vms.(
                      $prefix := $baseprefix & '.' & $vapp.short_id;
                      $subnets := $.subnet_ids.($id := $; $vappnets[id = $id]);
                      $prefix := $count($subnets) = 1 ?  $prefix & '.' & $subnets.short_id : $prefix;
                      {
                          $prefix & '.' & $.short_id: {
                              'title': $.name,
                              'symbol': $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $nodes := $append($nodes, $vappnets.(
                      $prefix := $baseprefix & '.' & $vapp.short_id;
                      {
                          $prefix & '.' & $.short_id: {
                              'title': $.name,
                              'symbol': 'vappnet-' & $.short_id,
                              'hideTitle': true
                          }
                      }
                  )
              );
              $symbols := $vms.(
                  $fn_svg_vm := $$.icons."reverse.general".svg_vm;
                  $href := $.vm_link;
                  $icon := $eval($fn_svg_vm, {'name': $.name, 'href': $href});
                  {
                      $.short_id: $icon
                  }
              );
              $symbols := $append($symbols, 
                  $vappnets.(
                      $fn_svg_vappnet_header := $$.icons."reverse.general".svg_vappnet_header;
                      $href := $.vappnet_link;
                      $icon := $eval($fn_svg_vappnet_header, {'name': $.name, 'href': $href});
                      {
                          'vappnet-' & $.short_id: $icon
                      }
                  )
              );
              $links := [$vms.(
                  $vm := $;
                  $subnets := $.subnet_ids.($id := $; $vappnets[id = $id]);
                  $count($subnets) > 1 ? (
                      $vmregexp := $eval('/.*\\.' & $.short_id & '$/');
                      $vmnode := $nodes[$vmregexp($.$keys())].$keys()[0];
                      $subnets.(
                          $subnetregexp := $eval('/.*\\.' & $.short_id & '$/');
                          $subnetnode := $nodes[$subnetregexp($.$keys())].$keys()[0];
                          {
                              'from': $vmnode,
                              'to': $subnetnode,
                              'style': '-',
                              'title': 'Directly connected'
                          }
                      )
                  )
              )];
              {
                  'nodes': $merge($nodes),
                  'symbols': $merge($symbols),
                  'links': $links
              };
          )

      vm_list:
        type: table
        headers:
          - value: name
            text: Наименование
            width: 200
            sortable: true
            link: vm_link
          - value: description
            text: Описание
            width: 400
        source: >
          (
              $id := $params.id;
              [$reverse_enterprise_vms($)[vapp_id = $id]]
          )

      list:
        type: table
        headers:
          - value: name
            text: Наименование vApp
            sortable: true
            align: left
            link: vapp_link
            width: 300
          - value: description
            text: Описание
            align: left
            width: 300
          - value: vdc_name
            text: VDC
            align: left
            sortable: true
            width: 200
            link: vdc_link
          - value: org_name
            text: Организация
            align: left
            sortable: true
            width: 200
            link: org_link
        source: >
          (
              $domain := $params.domain;
              $vdc_id := $params.vdc_id;
              $vdcgroup_id := $params.vdcgroup_id;
              $tmp := $exists($vdc_id) ? (
                  [$reverse_enterprise_vapps($, $domain)[vdc_id = $vdc_id]]
              ) : (
                  $exists($vdcgroup_id) ? (
                      $vdcgroup := $reverse_enterprise_vdcgroups($, $domain)[id = $vdcgroup_id];
                      $vdcs := $reverse_enterprise_vdcs($, $domain)[id in $vdcgroup.vdc_ids];
                      [$reverse_enterprise_vapps($, $domain)[vdc_id in $vdcs.id]]
                  ) : (
                      [$reverse_enterprise_vapps($, $domain)]
                  )
              );
          )